
<script src="~/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>

<h1>@ViewBag.RoomId</h1>

<div video-grid>

</div>

<script>
    const videoHubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/videoChat")
        .withAutomaticReconnect()
        .build();

    const ROOM_ID = '@ViewBag.RoomId'
    const Peers = {}

    let userId = null
    let localStream = null

    const peer = new Peer()

    peer.on('open', id => {
        userId = id       
        
        const startConnection = async () => {
            await videoHubConnection.start();
            await videoHubConnection.invoke("JoinRoom", ROOM_ID, userId)
        }

        startConnection()
    })

    peer.on("call", call => {
        call.answer(localStream)

        const userVideo = document.createElement("video")

        call.on("stream", userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })
    })

    videoHubConnection.on("JoinRoom", data => {
        if (data == userId) return

        console.log(data)

        connectNewUser(data, localStream)
    })

    videoHubConnection.on("LeaveRoom", data => {
        console.log(data)

        if (Peers[data]){
            Peers[data].close()
        }
    })
    
    const videogrid = document.querySelector('[video-grid]')
    const gVideo = document.createElement('video')
    gVideo.muted = true

    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
    }).then(stream => {
        addVideoStream(gVideo, stream)

        localStream = stream
    })

    const connectNewUser = (userId, localStream) => {
        const userVideo = document.createElement("video")
        const call = peer.call(userId, localStream)

        call.on("stream", userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })

        call.on("close", () => {
            userVideo.remove()
        })

        Peers[userId] = call
    }

    const addVideoStream = (video, stream) => {
        video.srcObject = stream
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })

        console.log("add")
        videogrid.appendChild(video)
    }

</script>